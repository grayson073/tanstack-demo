/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AlbumsAlbumIdIndexImport } from './routes/albums/$albumId/index'
import { Route as AlbumsAlbumIdImagesImageIdImport } from './routes/albums/$albumId/images/$imageId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsAlbumIdIndexRoute = AlbumsAlbumIdIndexImport.update({
  id: '/albums/$albumId/',
  path: '/albums/$albumId/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsAlbumIdImagesImageIdRoute = AlbumsAlbumIdImagesImageIdImport.update(
  {
    id: '/albums/$albumId/images/$imageId',
    path: '/albums/$albumId/images/$imageId',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/albums/$albumId/': {
      id: '/albums/$albumId/'
      path: '/albums/$albumId'
      fullPath: '/albums/$albumId'
      preLoaderRoute: typeof AlbumsAlbumIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/albums/$albumId/images/$imageId': {
      id: '/albums/$albumId/images/$imageId'
      path: '/albums/$albumId/images/$imageId'
      fullPath: '/albums/$albumId/images/$imageId'
      preLoaderRoute: typeof AlbumsAlbumIdImagesImageIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/albums/$albumId': typeof AlbumsAlbumIdIndexRoute
  '/albums/$albumId/images/$imageId': typeof AlbumsAlbumIdImagesImageIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/albums/$albumId': typeof AlbumsAlbumIdIndexRoute
  '/albums/$albumId/images/$imageId': typeof AlbumsAlbumIdImagesImageIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/albums/$albumId/': typeof AlbumsAlbumIdIndexRoute
  '/albums/$albumId/images/$imageId': typeof AlbumsAlbumIdImagesImageIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/albums/$albumId' | '/albums/$albumId/images/$imageId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/albums/$albumId' | '/albums/$albumId/images/$imageId'
  id:
    | '__root__'
    | '/'
    | '/albums/$albumId/'
    | '/albums/$albumId/images/$imageId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumsAlbumIdIndexRoute: typeof AlbumsAlbumIdIndexRoute
  AlbumsAlbumIdImagesImageIdRoute: typeof AlbumsAlbumIdImagesImageIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumsAlbumIdIndexRoute: AlbumsAlbumIdIndexRoute,
  AlbumsAlbumIdImagesImageIdRoute: AlbumsAlbumIdImagesImageIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/albums/$albumId/",
        "/albums/$albumId/images/$imageId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/albums/$albumId/": {
      "filePath": "albums/$albumId/index.tsx"
    },
    "/albums/$albumId/images/$imageId": {
      "filePath": "albums/$albumId/images/$imageId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
